#!/usr/bin/env python3

#from equihash import EquiValidation
from ctypes import *
from binascii import hexlify
from pyzceqsolver import Solver
import os
import time

newSolver = Solver()

old_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'equihash.so')

myso = cdll.LoadLibrary(old_path)

data = '04000000247217a20c6fee67b148fa37bfe82a04ea57c67f07a5d13a0768cf0600000000668a098a40f96271251831ed13bc3c9be801effecee0c544cf99cc0bf761429800000000000000000000000000000000000000000000000000000000000000005d4f355856de001dd9000000000000006d4b00000000000000000000000000000000000000000000fd4005009ab2eda6079c078a15744c5d4d833159cb9ae2283693bcb04461eadfe7cfc3b6a97eadd16f2e9f71ce0a39fe664b6d0e7f783432050effbdba7a3896d60c0b9859e31603278951abb1b0ae7d76af08adfae5890e2318727dc4fd5afb8e652553775061919bfe87b31d51f48db61dcfff8702521c05bd33c6448535479b19419c63f4c89a37db6cc1ea42a32cf1873b30e3bc85b86dd8286e7461a9a4b88110d695fb0e393fe272018260d22201fbc4c790a18ceb72a18d2aa20d3dc04512cf6751556bdfb4ada5795e7c5025f71a19223b108819f80320556f105cd94bccdcf98f1b2cfa54774bc5c76cd8d6c017db2058fb2ddc9947740b7d24850683aa71f845bac7cde368eff3eee83ec01519ab4221a7d187e7fb7e69e28ed51026b365bed746379be40cb3d8a0dc0723ded986e48fad58fc953d952f988e2e9b627119591d03708cd59303f3ed3ea2be7f9364033293e320a52a93a8684ae69c587352bc391ccb4b0d6a85a2679963192cf346da0fe8d07e043afa3f9608585910d3c32b9bcbb7a94d4f6869e3b8b49f773021ff4c0b23aba6b763e6b39a1bb6a7416a9d7ad3da083749876cd695c5057911b5673435f125714dc2e113ba4cd75849a532f14e74fe79533179d912d655de0b5cee6afc4644bef426a2b5e65c6695176a69d9293441fcdc1f65df0f92e51375cdb7f1c924107b4ffa03cde21d06cd7a41bb73b0c03f3e84a360fe9b49172322dd84a4ce9b2d194523e4d36ac3b93df1b905250649d4e87c0265fc607640a33716bd2b2991bd030908aa718df61511ed940d9824a66a3ad700657d8d8f0ccc872c72773269c7b91266c84b756ab54fd7a1f21272b68104c77bd2c91bf4318ec425724c58ba34e20e1d2924afb2b3e7d80995773e7e4489dc47d3c453186c08cf0ebd20a9ec3ff197f54b3df6182f79f232014f10eb9582a960c3f9c178639d495d9a97b699275a5e8583b322b409f9f477c8874bc47acbd3dfe8af0eee745393219e69d588e139e2e91b7cfc367527df103e6c00a698029b5b746302201a473a5c9d38f3b205e05f7a8956b3dd9bb350becffc182cc1dc5159e6151d3c80a58e140f1ec152b64b435c90ce4f90787017d83c34739aa29b0bbda7507fe73bae3b19f76633196f37ae3e4c1bbd7409f30027f2d7c1ecc23e916e0735b32641a72f3d9f902150d3ebe385523c6ad857184e3f007d110d36f68c12004f6f1a7accbf3b590116297327429728d2c2ebb22ae73427a76e069e73243b69ae467314ce89ad643590fad333496d6e15f1c70765b8bf7ecc12abc27971379a6a153966f97172b426a5e3aec8df39851486f2802c639181b119589a961cefc48da459fef2d0d4b2ccf6b6907948798d90d923568b8e31da80eb140012e001fe1f52239ab945fb05a9890fe2821888525082be7a617f370cc6fb829a2f000f202797697f2e84d55ddcf36f45be179d9326171a4ae369e021f54589423b40f0e3c896ef17393350a9158313206b47ecbcc5bc03dbab5efcd598044d0795012cefd91b0b138855e6e4f48d2b2f109ed39d086b9ef37cb6e3c7ebe1f49c69f9600319ea3c48f74fe61f4a0958b643b76eb687d5cbaa89f0b5d0cf685e06d6d2b37557dfd82a566ddacbeaaa3edc13a1a70eedc8be3515c939561bd4f6be64ccfa3881fde4c6100faabbeca649b77eb2a98181e53a5ac5eede46c8192646428632b763b42a545447a701dde1225562233a9952669e13d05f6904056824bfd0ed78eb6ef9bd1294c26ac15b405708d704704fc8eb635ef3bafd8d26deea7a31f82e37f26f229a4b15bf8a76aad4579e19e0fd5e8769eddb55c8094d58f9cac2b633f83e3026f91c6dbda975d9684df37feffd205993e732d1fc'

datab = bytes.fromhex(data);

ret = myso.SoluValidation(datab[:140], datab[143:143+1344])
if ret:
	print("right data : old algorithm true")
else:
	print("right data :old algorithm false")


re = newSolver.validate_solution(datab[:140], datab[143:143+1344])
if re:
	print("right data : new algorithm true")
else:
	print("right data : new algorithm false")



header='0400000008e9694cc2120ec1b5733cc12687b609058eec4f7046a521ad1d1e3049b400003e7420ed6f40659de0305ef9b7ec037f4380ed9848bc1c015691c90aa16ff3930000000000000000000000000000000000000000000000000000000000000000c9310d5874e0001f000000000000000000000000000000010b000000000000000000000000000040'

block='0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f0000f80007c0003e0001f'

ret = myso.SoluValidation(bytes.fromhex(header), bytes.fromhex(block))
if ret:
	print("wrong data : old algorithm true")
else:
	print("wrong data :old algorithm false")


re = newSolver.validate_solution(bytes.fromhex(header), bytes.fromhex(block))
if re:
	print("wrong data : new algorithm true")
else:
	print("wrong data : new algorithm false")


start = time.time()
print ('now time: %s, start old algorithm. 20000 times' % start)
for num in range(0, 10000):
        myso.SoluValidation(datab[:140], datab[143:143+1344])
        myso.SoluValidation(bytes.fromhex(header), bytes.fromhex(block))

stop = time.time()
print('now time: %s, old algorithm cost :%s' % (stop, stop - start))

start = time.time()
print ('now time: %s, start new algorithm 20000 times' % start)
for num in range(0, 10000):
        newSolver.validate_solution(datab[:140], datab[143:143+1344])
        newSolver.validate_solution(bytes.fromhex(header), bytes.fromhex(block))

stop = time.time()
print('now time: %s, new algorithm cost :%s' % (stop, stop - start))


